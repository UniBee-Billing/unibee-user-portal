import { Dayjs } from 'dayjs'
import { Currency } from 'dinero.js'

interface IProfile {
  address: string
  countryName: string
  countryCode: string
  companyName: string
  email: string
  facebook: string
  firstName: string
  lastName: string
  id: number | null
  externalUserId: string
  phone: string
  type: 1 | 2 // 1: individual, 2: business
  paymentMethod: string // for card payment, this is the stripe paymentId, used for auto recurring payment
  gatewayId?: number // after a successful payment, the payment gateway is saved as default. This is null for newly registered user.
  gateway?: TGateway // ditto.
  linkedIn: string
  telegram: string
  tikTok: string
  vATNumber: string
  registrationNumber: string
  weChat: string
  whatsAPP: string
  otherSocialInfo: string
  token: string
  language: string // en | ru | cn | vi | pt,      English | Russian | Chinese | Vietnamese | Portuguese
}

type TGateway = {
  gatewayId?: number
  gatewayKey?: string
  gatewayName: 'paypal' | 'changelly' | 'stripe' | 'wire_transfer'
  displayName: string
  // gatewayLogo: string
  gatewayType?: number
  webhookEndpointUrl: string
  webhookSecret: string // this is the public key(generated by Changelly), used to ensure the sender can be trusted
  createTime?: number
  minimumAmount?: number // wire tranfer only
  currency?: string // ditto
  bank?: {
    // ditto
    accountHolder: string
    bic: string
    iban: string
    address: string
  }
}

type TMerchantInfo = {
  id: number
  address: string
  companyId: string
  companyLogo: string
  companyName: string
  host: string
  email: string
  location: string
  phone: string
}

interface IAppConfig {
  env: string
  isProd: boolean
  supportTimeZone: string[]
  supportCurrency: { Currency: string; Symbol: string; Scale: number }[]
  gateway: TGateway[]
}

type Country = {
  countryCode: string
  countryName: string
}

interface IAddon extends IPlan {
  quantity: number | null
  checked: boolean
}

interface IProduct {
  id: number
  productName: string
  description: string
  status: number // ，1-active，2-inactive, default active
  metaData: string // json string
  createTime: number
  isDeleted: number
}

interface IPlan {
  id: number
  productId: number
  planName: string
  description: string
  type: number // 1: main plan, 2: add-on, 3: one-time-payment addon
  currency: Currency
  intervalCount: number
  intervalUnit: 'day' | 'week' | 'month' | 'year' //string;
  amount: number
  status: number
  addons?: IAddon[]
  onetimeAddons?: IAddon[]
  cancelAtTrialEnd: number
  trialAmount: number
  trialDemand: string
  trialDurationTime: number
}

interface ISubAddon extends IPlan {
  // when update subscription plan, I need to know which addons users have selected,
  // then apply them on the plan
  quantity: number
  addonPlanId: number
}

interface ISubscription {
  id: number
  subscriptionId: string
  planId: number
  productId: number
  userId: number
  status: number
  link: string | undefined
  firstPaidTime: number
  currentPeriodStart: number
  currentPeriodEnd: number
  defaultPaymentMethodId: string
  trialEnd: number
  cancelAtPeriodEnd: number // whether this sub will end at the end of billing cycle, 0: false, 1: true
  amount: number
  currency: string
  taxPercentage: number // 20000 means 20%
  plan: IPlan
  addons: ISubAddon[]
  user: IProfile | null
  unfinishedSubscriptionPendingUpdate?: {
    // downgrading will be effective on the next cycle, this props show this pending stat
    effectImmediate: number
    effectTime: number
    prorationAmount: number // for plan upgrading, you need to pay the difference amt.
    paid: number // 1: paid,
    link: string // stripe payment link
    plan: IPlan // original plan
    updatePlan: IPlan // plan after change(upgrade/downgrade, or quantity change)
    // these are pending subscription's actual data
    updateAmount: number
    updateCurrency: string
    updateAddons: ISubAddon[]
  }
  gatewayId: number
  latestInvoice?: UserInvoice
}

interface ISubHistoryItem {
  merchantId: number
  userId: number
  subscriptionId: string
  periodStart: number
  periodEnd: number
  invoiceId: string
  uniqueId: string
  currency: string
  planId: number
  plan: IPlan
  quantity: number
  addons: { quantity: number; addonPlan: IPlan }[]
  gatewayId: number
  createTime: number
}

interface IOneTimeHistoryItem {
  id: number
  bizType: number
  merchantId: number
  userId: number
  subscriptionId: string
  invoiceId: string
  uniqueId: string
  currency: string
  amount: number
  unitAmount: number
  quantity: number
  paymentId: string
  status: number
  createTime: number
  description: string
  name: string
}

type TRefund = {
  currency: string
  refundAmount: number
  refundComment: string
  refundTime: number
  createTime: number
  status: number // 10-pending，20-success，30-failure, 40-cancel
  gatewayId: number
  paymentId: string
}
// this is for user view only, generated by admin or system automatically
interface UserInvoice {
  id: number
  merchantId: number
  userId: number
  subscriptionId: string
  invoiceId: string
  invoiceName: string
  gatewayInvoiceId: string
  uniqueId: string
  createTime: number
  originAmount?: number
  discountAmount?: number
  discount?: DiscountCode
  totalAmount: number
  taxAmount: number
  taxScale: number
  subscriptionAmount: number
  currency: string
  lines: InvoiceItem[]
  status: number // go check INVOICE_STATUS in constants.ts
  sendStatus: number
  sendEmail: string
  sendPdf: string
  data: string
  isDeleted: number
  link: string
  gateway: TGateway
  gatewayId: number
  gatewayStatus: string
  gatewayPaymentId: string
  gatewayUserId: string
  gatewayInvoicePdf: string
  taxPercentage: number
  sendNote: string
  sendTerms: string
  totalAmountExcludingTax: number
  subscriptionAmountExcludingTax: number
  periodStart: number
  periodEnd: number
  paymentId: string
  refundId: string
  refund?: TRefund //

  userAccount: IProfile
}

type InvoiceItem = {
  id: string
  amount: number
  amountExcludingTax: number
  currency: string
  description: string
  periodEnd?: number
  periodStart?: number
  proration?: boolean
  quantity: number
  tax: number // tax amount
  taxPercentage: number // tax rate
  unitAmountExcludingTax: number
  discountAmount: number
  originAmount: number
}

type InvoiceItemTotal = {
  currency: string
  subscriptionAmount: number
  subscriptionAmountExcludingTax: number
  taxAmount: number
  taxPercentage: number
  totalAmount: number
  totalAmountExcludingTax: number
  lines: InvoiceItem[]
}

type PaymentItem = {
  id: number
  transactionId: string
  externalTransactionId: string
  merchantId: number
  userId: number
  subscriptionId: string
  invoiceId: string
  currency: string
  totalAmount: number
  gatewayId: number
  paymentId: string
  refund?: TRefund
  status: number
  timelineType: number
  createTime: number
}

type DiscountCode = {
  id?: number
  merchantId: number
  name: string
  code: string
  status?: number
  billingType: number
  discountType: number
  discountAmount: number
  discountPercentage: number
  currency: string
  cycleLimit: number
  startTime: number
  endTime: number
  validityRange: [Dayjs | null, Dayjs | null]
  createTime?: number
  metadata?: {
    [key: string]: string
  }
}

interface IPreview {
  originAmount: number // total amt is the one after applying the discount code, this is the amt before discount
  totalAmount: number // these 3 fields need to be resent to backend when submitting createSub/updateSub
  prorationDate?: number // ditto
  currency: string // ditto
  discount: DiscountCode | null
  discountAmount: number
  discountMessage: string
  taxPercentage: number
  vatCountryCode?: string
  vatCountryName?: string
  vatNumber?: string
  vatNumberValidate?: {
    valid: boolean
    vatNumber: string
    countryCode: string
    companyName: string
    companyAddress: string
    validateMessage: string
  }
  vatNumberValidateMessage: string
  invoice: InvoiceItemTotal
  nextPeriodInvoice?: InvoiceItemTotal // same as above invoice obj, only optional, used when downgrading.
}

export class ExpiredError extends Error {
  constructor(m: string) {
    super(m)
  }
}

export type {
  Country,
  DiscountCode,
  IAppConfig,
  IOneTimeHistoryItem,
  IPlan,
  IPreview,
  IProduct,
  IProfile,
  ISubHistoryItem,
  ISubscription,
  InvoiceItem,
  InvoiceItemTotal,
  PaymentItem,
  TMerchantInfo,
  TRefund,
  UserInvoice
}
